version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: video-tracker-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGPASSWORD:-postgres}
      POSTGRES_DB: ${PGDATABASE:-video_progress_tracker}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Backend Node.js API
  backend:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    container_name: video-tracker-backend
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      PGHOST: postgres
      PGUSER: ${PGUSER:-postgres}
      PGDATABASE: ${PGDATABASE:-video_progress_tracker}
      PGPASSWORD: ${PGPASSWORD:-postgres}
      PGPORT: 5432
      JWT_SECRET: ${JWT_SECRET:-uWxz9Kq7BpTfA5mJ2eD8sR4vL6yH3nG1}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-cX7bN2pE6tY9vR4zK3mS8wQ1aD5gF0jH}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      CLIENT_URL: http://frontend
    ports:
      - "5000:5000"
    networks:
      - app-network
    volumes:
      - ./server:/app
      - /app/node_modules

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: ./client/Dockerfile
    container_name: video-tracker-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "3000:80"
    networks:
      - app-network
    volumes:
      - ./client:/app
      - /app/node_modules

# Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
